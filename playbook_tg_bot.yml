- name: instalation for all hosts
  hosts: all
  gather_facts: false
  tasks:
    - name: Установка PostgreSQL
      become: yes
      apt:
        name: "{{ item }}"
        state: present
      with_items:
        - postgresql
        - postgresql-contrib
    - name: install postgresql
      package: 
        name: postgresql
        state: present
    - name: install psycopg
      package: 
        name: postgresql-contrib
        state: present
    - name: install libpq-dev
      package:
        name: libpq-dev
        state: present

- name: db init
  hosts: host01
  gather_facts: false
  tasks:
    - name: copy
      copy:
        src: "{{ hostvars[inventory_hostname]['dir'] }}/init.sql"
        dest: /tmp/init.sql
        mode: '0644'
    - name: chown
      command: chown postgres:postgres /tmp/init.sql
    - name: dbdatabase
      replace:
        path: /tmp/init.sql
        regexp: "dbdatabase"
        replace: "{{ hostvars[inventory_hostname]['DB_DATABASE'] }}"
    - name: repluser
      replace:
        path: /tmp/init.sql
        regexp: "repluser"
        replace: "{{ hostvars[inventory_hostname]['DB_REPL_USER'] }}"
    - name: replpassword
      replace:
        path: /tmp/init.sql
        regexp: "replpassword"
        replace: "{{ hostvars[inventory_hostname]['DB_REPL_PASSWORD'] }}"
    - name: dbuser
      replace:
        path: /tmp/init.sql
        regexp: "dbuser"
        replace: "{{ hostvars[inventory_hostname]['DB_USER'] }}"
    - name: dbpassword
      replace:
        path: /tmp/init.sql
        regexp: "dbpassword"
        replace: "{{ hostvars[inventory_hostname]['DB_PASSWORD'] }}"
    - name: restart postgresql
      service:
        name: postgresql
        state: restarted
    - name: init.sql
      command: psql -a -f /tmp/init.sql
      become: true
      become_user: postgres

- name: repl config
  hosts: host01
  gather_facts: false
  tasks:
    - name: add to conf file
      blockinfile:
        path: "/etc/postgresql/{{ hostvars[inventory_hostname]['POSTGRES_VERSION'] }}/main/postgresql.conf"
        block: |
          listen_addresses = 'localhost, {{ hostvars[inventory_hostname]['ansible_host'] }}'
          wal_level = hot_standby
          archive_mode = on
          archive_command = 'cd .'
          max_wal_senders = 10
          hot_standby = on
          log_destination = 'stderr'
          logging_collector = on
          log_directory = '/var/log/postgresql/'
          log_filename = 'postgresql.log'
          log_replication_commands = on
    - name: pg_hba conf
      blockinfile:
        path: "/etc/postgresql/{{ hostvars[inventory_hostname]['POSTGRES_VERSION'] }}/main/pg_hba.conf"
        block: | 
          host replication postgres {{ hostvars['host02']['ansible_host'] }}/32 md5
          host ptstart all 0.0.0.0/0 md5

    - name: restart postgresql
      service:
        name: postgresql
        state: restarted
      
- name: slave config and init
  hosts: host02
  gather_facts: false
  tasks:
    - name: stop postgres
      service:
        name: postgresql
        state: stopped
    - name: change pg_hba
      blockinfile:
        path: "/etc/postgresql/{{ hostvars[inventory_hostname]['POSTGRES_VERSION'] }}/main/pg_hba.conf"
        block: | 
          host replication postgres {{ hostvars['host01']['ansible_host'] }}/32 md5

    - name: change pgrsconf
      blockinfile:
        path: "/etc/postgresql/{{ hostvars[inventory_hostname]['POSTGRES_VERSION'] }}/main/postgresql.conf"
        block: |
          listen_addresses = 'localhost, {{ hostvars[inventory_hostname]['ansible_host'] }}'
          wal_level = hot_standby
          archive_mode = on
          archive_command = 'cd .'
          max_wal_senders = 10
          hot_standby = on

    - name: rm
      command: chdir=/var/lib/postgresql/{{ hostvars[inventory_hostname]['POSTGRES_VERSION'] }}/ rm -rf main; mkdir main; chmod go-rwx main
      become: yes
      become_user: postgres
    - name: pg_basebackup
      command: chdir=/var/lib/postgresql/{{ hostvars[inventory_hostname]['POSTGRES_VERSION'] }}/  pg_basebackup -P -R -X stream -c fast -h {{ hostvars['host01']['ansible_host'] }} -U postgres -D ./main
      become: yes
      become_user: postgres
      environment: 
        PGPASSWORD: "{{ hostvars[inventory_hostname]['DB_REPL_PASSWORD'] }}"
    - name: restart postgresql
      service:
        name: postgresql
        state: started

- name: python bot
  hosts: host01
  gather_facts: false
  tasks:
    - name: mkdir
      command: sudo mkdir -p "{{ hostvars[inventory_hostname]['dir'] }}/project"
    - name: git clone
      git:
        repo: https://github.com/alxrznv/devops_bot.git
        dest: "{{ hostvars[inventory_hostname]['dir'] }}/project"
        version: AnsibleSource
    - name: pip install
      pip: 
        requirements: "{{ hostvars[inventory_hostname]['dir'] }}/project/requirements.txt"
    - name: mkdir logs
      command: mkdir -p "{{ hostvars[inventory_hostname]['dir'] }}/../logs"
    - name: run python bot
      command: python3 "{{ hostvars[inventory_hostname]['dir'] }}/project/main.py"
      environment:
        TOKEN: "{{ hostvars[inventory_hostname]['TOKEN'] }}"
        RM_HOST: "{{ hostvars[inventory_hostname]['RM_HOST'] }}"
        RM_PORT: "{{ hostvars[inventory_hostname]['RM_PORT'] }}"
        RM_USER: "{{ hostvars[inventory_hostname]['RM_USER'] }}"
        RM_PASSWORD: "{{ hostvars[inventory_hostname]['RM_PASSWORD'] }}"
        DB_HOST: "{{ hostvars[inventory_hostname]['ansible_host'] }}"
        DB_PORT: "{{ hostvars[inventory_hostname]['DB_PORT'] }}"
        DB_USER: "{{ hostvars[inventory_hostname]['DB_USER'] }}"
        DB_PASSWORD: "{{ hostvars[inventory_hostname]['DB_PASSWORD'] }}"
        DB_DATABASE: "{{ hostvars[inventory_hostname]['DB_DATABASE'] }}"
        PG_VERSION: "{{ hostvars[inventory_hostname]['POSTGRES_VERSION'] }}"
    
      
